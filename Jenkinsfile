pipeline {
   agent any
    
    environment {
        DOCKER_IMAGE = 'todo-app'
        DOCKER_TAG = 'v1.0.0'
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
        NETLIFY_SITE_ID = credentials('netlify-site-id')
        NODEJS_VERSION = '18.x'
        TRIVY_SEVERITY = 'HIGH,CRITICAL'
    }
    
    stages {
        stage('Construire l\'application') {
            steps {
                script {
                    echo 'üî® D√©marrage de la construction de l\'application...'
                    sh 'docker-compose up -d --build'
                    echo '‚úÖ Construction de Docker r√©ussie'
                }
            }
        }

        stage('Installer Trivy') {
            steps {
                script {
                    echo 'üîß Installation de Trivy...'
                    sh '''
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.1
                        trivy --version
                    '''
                    echo '‚úÖ Trivy install√© avec succ√®s'
                }
            }
        }
        
        stage('Analyse de s√©curit√©') {
            steps {
                script {
                    echo 'üîç D√©marrage de l\'analyse de s√©curit√©...'
                    sh """
                        trivy image \
                            --exit-code 1 \
                            --severity \${TRIVY_SEVERITY} \
                            --format table \
                            --output trivy-report.txt \
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                    echo '‚úÖ Analyse de s√©curit√© termin√©e'
                }
            }
        }
        
        stage('Ex√©cuter les tests') {
            steps {
                script {
                    echo 'üß™ Ex√©cution des tests...'
                    sh 'docker-compose exec -T frontend npm test -- --watchAll=false'
                    echo '‚úÖ Tests ex√©cut√©s avec succ√®s'
                }
            }
        }

        stage('Construire pour Netlify') {
            steps {
                script {
                    echo 'üì¶ Construction pour Netlify...'
                    nodejs(NODEJS_VERSION) {
                        sh '''
                            export VITE_APP_API_URL=https://api.yourapp.com
                            npm run build
                        '''
                    }
                    echo '‚úÖ Construction r√©ussie pour Netlify'
                }
            }
        }
        
        stage('D√©ployer en production') {
            when {
                branch 'main'
            }
            steps {
                input 'üöÄ D√©ployer en production ?'
                
                script {
                    echo 'üöÄ D√©marrage du d√©ploiement en production...'
                    sh """
                        npx netlify-cli deploy \
                            --dir=dist \
                            --auth=\${NETLIFY_AUTH_TOKEN} \
                            --site=\${NETLIFY_SITE_ID} \
                            --prod \
                            --message="D√©ploiement en production depuis Jenkins #${env.BUILD_NUMBER}"
                    """
                    echo '‚úÖ D√©ploiement en production r√©ussi'
                }
            }
        }
    }
    
    post {
        always {
            node {
                echo 'üîÑ Nettoyage final...'
                sh 'docker-compose down --rmi all -v'
                cleanWs()
            }
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s !'
        }
        failure {
            echo '‚ùå √âchec du pipeline !'
        }
    }
}

